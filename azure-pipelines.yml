# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master

# https://docs.microsoft.com/en-us/azure/devops/pipelines/process/container-phases?view=azure-devops
# https://docs.docker.com/network/none/
# https://docs.microsoft.com/en-us/azure/devops/pipelines/process/container-phases?view=azure-devops#options
# https://github.com/microsoft/azure-pipelines-yaml/blob/master/design/step-target.md

resources:
  containers:
    - container: mycontainer
      image: ubuntu:18.04
      options: --name mycontainer1


stages:
#    - stage: Init
#      dependsOn: []
#      jobs:
#          - job: node
#            pool:
#                vmImage: ubuntu-latest
#            steps:
#                 - task: NodeTool@0
#                   inputs:
#                     versionSpec: '10.x'
#                   displayName: 'Install Node.js'
#
#                 - script: |
#                    npm install
#                    npm run build
#                   displayName: 'npm install and build'

    - stage: Static_analysis
      dependsOn: []
      jobs:
          - job: validate
            #pool:
            #    vmImage: ubuntu-latest
            #container:
            #  mycontainer

            steps:

                - script: docker inspect mycontainer1 -f "{{json .NetworkSettings.Networks }}"
                #- script: docker network disconnect mynet mycontainer1
                  target: host # reserved name for the host the worker is running on

                - task: NodeTool@0
                  inputs:
                    versionSpec: '10.x'
                  displayName: 'Install Node.js'
                  target: mycontainer

                - script: |
                   npm install
                   npm run build
                  displayName: 'npm install and build'
                  target: mycontainer

                - script: |
                    npm install
                    npm run build
                  displayName: 'npm install and build'
                  target: mycontainer

                - script: |
                      # By convention, we expose api specifications using files
                      #  in form api_<api-name>.yaml in the root of this project
                      valid=1
                      for apispec in $(ls api_*.yaml); do
                        echo "validating $apispec"
                        npx oval validate -p $apispec
                        result=$?
                        if [ ! $result = 0 ]; then
                          valid=0
                          echo "$apispec failed with code $result"
                        fi
                      done
                      [[ $valid = 1 ]] && exit 0 || exit 1
                  displayName: 'Validate API specifications'
                  target: mycontainer
